{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddlware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddlware from 'redux-thunk';\nimport data from './data/data.json'; //initial State\n\nconst startState = {\n  cards: []\n}; //Actions\n\nexport const initialCard = () => {\n  return {\n    type: \"INITIALCARDS\",\n    cards: data\n  };\n};\nexport const addItem = item => {\n  return {\n    type: \"ADD\",\n    item\n  };\n}; //reducers\n\nexport const reducer = (state = initialCard, action) => {\n  switch (actions.typ) {\n    case 'INITIALCARDS':\n      return {\n        cards: action.cards\n      };\n\n    case 'ADD':\n      {\n        return _objectSpread({}, state, {\n          cards: [...state.cards, action.item]\n        });\n      }\n\n    default:\n      return state;\n  }\n}; //create store\n\nexport const initStore = (initialState = startState) => {\n  return createStore(reducer, initialState, composeWithDevTools(applyMiddlware(thunkMiddlware)));\n};","map":{"version":3,"sources":["D:/Projects/ReactNativeProjects/ssr/store.js"],"names":["createStore","applyMiddlware","composeWithDevTools","thunkMiddlware","data","startState","cards","initialCard","type","addItem","item","reducer","state","action","actions","typ","initStore","initialState"],"mappings":";;;;;;AAAA,SAAQA,WAAR,EAAoBC,cAApB,QAAyC,OAAzC;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,OAAOC,cAAP,MAA2B,aAA3B;AACA,OAAOC,IAAP,MAAiB,kBAAjB,C,CAEA;;AACA,MAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAC;AADS,CAAnB,C,CAKA;;AACA,OAAO,MAAMC,WAAW,GAAE,MAAI;AAC1B,SAAM;AACFC,IAAAA,IAAI,EAAC,cADH;AAEFF,IAAAA,KAAK,EAACF;AAFJ,GAAN;AAIH,CALM;AAOP,OAAO,MAAMK,OAAO,GAAIC,IAAD,IAAQ;AAC3B,SAAO;AACHF,IAAAA,IAAI,EAAC,KADF;AAEHE,IAAAA;AAFG,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAACL,WAAP,EAAmBM,MAAnB,KAA4B;AAC/C,UAAQC,OAAO,CAACC,GAAhB;AACI,SAAK,cAAL;AACI,aAAO;AACHT,QAAAA,KAAK,EAACO,MAAM,CAACP;AADV,OAAP;;AAGJ,SAAK,KAAL;AAAW;AACP,iCACOM,KADP;AAEIN,UAAAA,KAAK,EAAC,CAAC,GAAGM,KAAK,CAACN,KAAV,EAAgBO,MAAM,CAACH,IAAvB;AAFV;AAIH;;AACD;AACI,aAAOE,KAAP;AAZR;AAcH,CAfM,C,CAiBP;;AACA,OAAO,MAAMI,SAAS,GAAG,CAACC,YAAY,GAAGZ,UAAhB,KAA6B;AAClD,SAAOL,WAAW,CAACW,OAAD,EAASM,YAAT,EAAsBf,mBAAmB,CAACD,cAAc,CAACE,cAAD,CAAf,CAAzC,CAAlB;AACH,CAFM","sourcesContent":["import {createStore,applyMiddlware} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport thunkMiddlware from 'redux-thunk';\r\nimport data from './data/data.json';\r\n\r\n//initial State\r\nconst startState = {\r\n    cards:[]\r\n}\r\n\r\n\r\n//Actions\r\nexport const initialCard =()=>{\r\n    return{\r\n        type:\"INITIALCARDS\",\r\n        cards:data\r\n    }\r\n}\r\n\r\nexport const addItem = (item)=>{\r\n    return {\r\n        type:\"ADD\",\r\n        item\r\n    }\r\n}\r\n\r\n//reducers\r\nexport const reducer=  (state=initialCard,action)=>{\r\n    switch (actions.typ) {\r\n        case 'INITIALCARDS':\r\n            return {\r\n                cards:action.cards\r\n            }\r\n        case 'ADD':{\r\n            return {\r\n                ...state,\r\n                cards:[...state.cards,action.item]\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//create store\r\nexport const initStore = (initialState = startState)=>{\r\n    return createStore(reducer,initialState,composeWithDevTools(applyMiddlware(thunkMiddlware)))\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}